{"title":"Netty从入门到瞎搞","date":"2019-11-19T08:59:04.000Z","link":"2019/11/19/Netty从入门到瞎搞","tags":["Java","Netty"],"updated":"2019-11-19T09:00:05.734Z","content":"<h4 id=\"简介\">简介<a href=\"2019/11/19/Netty从入门到瞎搞#简介\"></a></h4><p>Netty是一个NIO客户端服务器框架，可以快速轻松地开发网络应用程序，例如协议服务器和客户端。它极大地简化和简化了TCP和UDP套接字服务器等网络编程。<br>“快速简便”并不意味着最终的应用程序将遭受可维护性或性能问题的困扰。Netty经过精心设计，结合了许多协议（例如FTP，SMTP，HTTP以及各种基于二进制和文本的旧式协议）的实施经验。结果，Netty成功地找到了一种无需妥协即可轻松实现开发，性能，稳定性和灵活性的方法。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://148.70.50.70/source/1574123012802.jpg\" alt=\"image.png\" class=\"article-img\"></p>\n<ul>\n<li>设计<br>适用于各种传输类型的统一API-阻塞和非阻塞套接字<br>基于灵活且可扩展的事件模型，可将关注点明确分离<br>高度可定制的线程模型-单线程，一个或多个线程池，例如SEDA<br>真正的无连接数据报套接字支持（从3.1开始）</li>\n<li>使用方便<br>记录良好的Javadoc，用户指南和示例<br>没有其他依赖关系，JDK 5（Netty 3.x）或6（Netty 4.x）就足够了<br>注意：某些组件（例如HTTP / 2）可能有更多要求。请参阅 需求页面 以获取更多信息。</li>\n<li>性能<br>更高的吞吐量，更低的延迟<br>减少资源消耗<br>减少不必要的内存复制-零拷贝</li>\n<li>安全<br>完整的SSL / TLS和StartTLS支持</li>\n<li>社区<br>提前发布，经常发布<br>自2003年以来，作者一直在编写类似的框架，但他仍然发现您的反馈很宝贵！<br>由于原生JDK自带的api使用起来开发十分麻烦，且门槛较高，Netty应运而生。<h4 id=\"应用\"><a href=\"2019/11/19/Netty从入门到瞎搞#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4></li>\n<li>分布式系统，Dubbo框架使用的RPC底层应用的就是Netty</li>\n<li>高性能游戏服务器开发</li>\n<li>大数据</li>\n</ul>\n<h3 id=\"在了解Netty之前，需要对一些概念有所了解\">在了解Netty之前，需要对一些概念有所了解<a href=\"2019/11/19/Netty从入门到瞎搞#在了解Netty之前，需要对一些概念有所了解\"></a></h3><h4 id=\"Selector\">Selector<a href=\"2019/11/19/Netty从入门到瞎搞#Selector\"></a></h4><p>传统的阻塞IO中，每个请求都需要独立的线程完成数据 Read，业务处理，数据 Write 的完整操作问题。当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大。连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在 Read 操作上，造成线程资源浪费。</p>\n<p>Netty 的 IO 线程 NioEventLoop 由于聚合了多路复用器 Selector，可以同时并发处理成百上千个客户端连接。当线程从某客户端 Socket 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。由于读写操作都是非阻塞的，这就可以充分提升 IO 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I/O 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</p>\n<h4 id=\"Buffer\">Buffer<a href=\"2019/11/19/Netty从入门到瞎搞#Buffer\"></a></h4><p>传统的 I/O 是面向字节流或字符流的，以流式的方式顺序地从一个 Stream 中读取一个或多个字节, 因此也就不能随意改变读取指针的位置。在NIO中，抛弃了传统的IO流，而是引入了Channel 和 Buffer的概念。在NIO中，只能从Channel中读取数据到Buffer中或将数据从Buffer中写入到Channel。</p>\n<h4 id=\"Reactor\">Reactor<a href=\"2019/11/19/Netty从入门到瞎搞#Reactor\"></a></h4><p>Reactor模型是指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式。服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor 模式也叫Dispatcher模式，即 I/O 多了复用统一监听事件，收到事件后分发(Dispatch 给某进程)Reactor。<br>线程模型分为</p>\n<ul>\n<li>单线程模型</li>\n<li>多线程模型</li>\n<li>主从线程模型</li>\n</ul>\n<p>Netty线程模型基于主从线程模型</p>\n<ul>\n<li><p>MainReactor 负责客户端的连接请求，并将请求转交给 SubReactor；</p>\n</li>\n<li><p>SubReactor 负责相应通道的 IO 读写请求；</p>\n</li>\n<li><p>非 IO 请求（具体逻辑处理）的任务则会直接写入队列，等待 worker threads 进行处理。</p>\n</li>\n</ul>\n<h4 id=\"Handler\">Handler<a href=\"2019/11/19/Netty从入门到瞎搞#Handler\"></a></h4><p>处理程序执行IO事件要完成的实际事件，Reactor 通过调度适当的处理程序来响应IO事件，处理程序执行非阻塞操作。</p>\n<h3 id=\"Netty入门\">Netty入门<a href=\"2019/11/19/Netty从入门到瞎搞#Netty入门\"></a></h3><h5 id=\"Bootstrap-ServerBootstrap\">Bootstrap ServerBootstrap<a href=\"2019/11/19/Netty从入门到瞎搞#Bootstrap-ServerBootstrap\"></a></h5><p>Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。</p>\n<h5 id=\"Future-ChannelFuture\">Future ChannelFuture<a href=\"2019/11/19/Netty从入门到瞎搞#Future-ChannelFuture\"></a></h5><p>Netty中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p>\n<h5 id=\"Channel\">Channel<a href=\"2019/11/19/Netty从入门到瞎搞#Channel\"></a></h5><p>Netty 网络通信的组件，能够用于执行网络 I/O 操作。Channel 为用户提供：</p>\n<ul>\n<li><p>当前网络连接的通道的状态（例如是否打开？是否已连接？）</p>\n</li>\n<li><p>网络连接的配置参数 （例如接收缓冲区大小）</p>\n</li>\n<li><p>提供异步的网络 I/O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I/O 调用都将立即返回，并且不保证在调用结束时所请求的 I/O 操作已完成。</p>\n</li>\n<li><p>调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I/O 操作成功、失败或取消时回调通知调用方。</p>\n</li>\n<li><p>支持关联 I/O 操作与对应的处理程序。</p>\n<h5 id=\"Selector-1\"><a href=\"2019/11/19/Netty从入门到瞎搞#Selector-1\" class=\"headerlink\" title=\"Selector\"></a>Selector</h5></li>\n</ul>\n<p>Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。</p>\n<h5 id=\"NioEventLoop\">NioEventLoop<a href=\"2019/11/19/Netty从入门到瞎搞#NioEventLoop\"></a></h5><p>NioEventLoop 中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用NioEventLoop 的 run 方法，执行 I/O 任务和非 I/O 任务：I/O 任务，即 selectionKey 中 ready 的事件，如 accept、connect、read、write 等，由 processSelectedKeys 方法触发。<br>非 IO 任务，添加到 taskQueue 中的任务，如 register0、bind0 等任务，由 runAllTasks 方法触发。</p>\n<p>两种任务的执行时间比由变量 ioRatio 控制，默认为 50，则表示允许非 IO 任务执行的时间与 IO 任务的执行时间相等。</p>\n<h5 id=\"NioEventLoopGroup\">NioEventLoopGroup<a href=\"2019/11/19/Netty从入门到瞎搞#NioEventLoopGroup\"></a></h5><p>NioEventLoopGroup，主要管理 eventLoop 的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个 Channel 上的事件，而一个 Channel 只对应于一个线程。</p>\n<h5 id=\"ChannelHandler\">ChannelHandler<a href=\"2019/11/19/Netty从入门到瞎搞#ChannelHandler\"></a></h5><p>ChannelHandler 是一个接口，处理 I/O 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：</p>\n<h5 id=\"ChannelHandlerContext\">ChannelHandlerContext<a href=\"2019/11/19/Netty从入门到瞎搞#ChannelHandlerContext\"></a></h5><p>保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象。</p>\n<h5 id=\"ChannelPipline\">ChannelPipline<a href=\"2019/11/19/Netty从入门到瞎搞#ChannelPipline\"></a></h5><p>保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作。ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互。</p>\n<h4 id=\"入门实战\">入门实战<a href=\"2019/11/19/Netty从入门到瞎搞#入门实战\"></a></h4><h6 id=\"Server类\">Server类<a href=\"2019/11/19/Netty从入门到瞎搞#Server类\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一堆线程组,用于接收客户端的连接，但是不做任何处理</span></span><br><span class=\"line\">        <span class=\"comment\">// 主线程组</span></span><br><span class=\"line\">        EventLoopGroup mainGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从线程组,线程组会把任务分配给它</span></span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// netty服务器的创建，ServerBootstrap是一个启动类</span></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(mainGroup, workerGroup)   <span class=\"comment\">// 设置主线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)  <span class=\"comment\">// 设置nio的双向通道</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ServerInit());        <span class=\"comment\">// 子处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 启动Server并设置8088启动端口，同时启动方式为同步</span></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">8084</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 监听关闭的channel，设置同步方式</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mainGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h6 id=\"ServerInit类\">ServerInit类<a href=\"2019/11/19/Netty从入门到瞎搞#ServerInit类\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化器，channel注册后，会执行里面相应的初始化方法</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel socketChannel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过SocketChannel去获得对应的管道</span></span><br><span class=\"line\">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过管道添加handler</span></span><br><span class=\"line\">        <span class=\"comment\">// HttpServerCodec是netty自己提供的助手类，可理解为拦截器</span></span><br><span class=\"line\">        <span class=\"comment\">// 当请求到服务端，我们需要做解码，响应到客户端做编码</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"HttpServerCodec\"</span>, <span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加自定义的助手类，返回</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">\"CustomHandler\"</span>, <span class=\"keyword\">new</span> CustomHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h6 id=\"CustomHandler类\">CustomHandler类<a href=\"2019/11/19/Netty从入门到瞎搞#CustomHandler类\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建自定义助手类,SimpleChannelInboundHandler相当于\"入站\"</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">HttpObject</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, HttpObject httpObject)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取channel</span></span><br><span class=\"line\">        Channel channel = channelHandlerContext.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (httpObject <span class=\"keyword\">instanceof</span> HttpRequest) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示客户端的远程地址</span></span><br><span class=\"line\">            System.out.println(channel.remoteAddress());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 定义发送的数据消息</span></span><br><span class=\"line\">            ByteBuf content = Unpooled.copiedBuffer(<span class=\"string\">\"Hello netty\"</span>, CharsetUtil.UTF_8);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 构建一个http response</span></span><br><span class=\"line\">            FullHttpResponse response = <span class=\"keyword\">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1,</span><br><span class=\"line\">                    HttpResponseStatus.OK,</span><br><span class=\"line\">                    content);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 为响应增加数据类型和长度</span></span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class=\"string\">\"text/plain\"</span>);</span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 把响应发到客户端</span></span><br><span class=\"line\">            channelHandlerContext.writeAndFlush(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"http://148.70.50.70/source/1574126235877.jpg\" alt=\"image.png\" class=\"article-img\"></p>\n<h4 id=\"创建一个WebSocket服务器\">创建一个WebSocket服务器<a href=\"2019/11/19/Netty从入门到瞎搞#创建一个WebSocket服务器\"></a></h4><h6 id=\"Main类\">Main类<a href=\"2019/11/19/Netty从入门到瞎搞#Main类\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoop;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup mainGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">        EventLoopGroup subGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap server = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            server.group(mainGroup, subGroup)</span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class)</span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// WebSocket基于http协议，所以要有http编解码器</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// 对写大数据流的支持</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> ChunkedWriteHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// 对HttpMessage进行聚合，聚合成FullHttpRequest或者FullHttpResponse</span></span><br><span class=\"line\">                            <span class=\"comment\">// 几乎所有的Netty编程中都会用到这个Handler</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> HttpObjectAggregator(<span class=\"number\">1024</span>*<span class=\"number\">64</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// websocket 服务器处理协议，用于给指定客户端连接访问的路由为 \"/ws\"</span></span><br><span class=\"line\">                            <span class=\"comment\">// 本handler会处理一些繁重的复杂的事</span></span><br><span class=\"line\">                            <span class=\"comment\">// 会处理握手动作，handshaking</span></span><br><span class=\"line\">                            <span class=\"comment\">// 对于websocket来讲，都是以frames进行传输，不同类型对应frames也不同</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> WebSocketServerProtocolHandler(<span class=\"string\">\"/ws\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// 自定义Handler,处理消息的handler</span></span><br><span class=\"line\">                            <span class=\"comment\">// 在netty中TextWebSocketFrame是用于为websocket专门处理文本对象，frame是消息的载体</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> ChatHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture future = server.bind(<span class=\"number\">8012</span>).sync();</span><br><span class=\"line\">            future.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            mainGroup.shutdownGracefully();</span><br><span class=\"line\">            subGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h6 id=\"ChatHandler类\">ChatHandler类<a href=\"2019/11/19/Netty从入门到瞎搞#ChatHandler类\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义Handler,处理消息的handler</span></span><br><span class=\"line\"><span class=\"comment\"> * 在netty中TextWebSocketFrame是用于为websocket专门处理文本对象，frame是消息的载体</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ChannelGroup clients = <span class=\"keyword\">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取客户端传输的消息</span></span><br><span class=\"line\">        String content = msg.text();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 给每个客户端发送</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Channel channel: clients) &#123;</span><br><span class=\"line\">            channel.writeAndFlush(<span class=\"keyword\">new</span> TextWebSocketFrame(<span class=\"string\">\"服务器接收到消息: \"</span> + content));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当客户端连接服务端后（打开链接）</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取客户端的channel，并且放入ChannelGroup进行管理</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerAdded</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        clients.add(ctx.channel());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerRemoved</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当触发handlerRemoved，ChannelGroup会自动移除对应客户端的channel</span></span><br><span class=\"line\">        clients.remove(ctx.channel());</span><br><span class=\"line\">        System.out.println(ctx.channel().id().asLongText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","next":{"title":"SpringBoot Zookeeper Dubbo简单搭建分布式系统","link":"2019/11/17/SpringBoot-Zookeeper-Dubbo简单搭建分布式系统"},"plink":"http://yoursite.com/2019/11/19/Netty从入门到瞎搞/"}