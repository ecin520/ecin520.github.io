{"title":"【转载】Shell 教程","date":"2019-09-28T16:07:33.000Z","link":"2019/09/29/【转载】Shell教程","tags":["Shell","转载"],"updated":"2019-11-02T06:56:32.041Z","content":"<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>\n<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<p><a href=\"https://www.runoob.com/try/showbash.php?filename=helloworld\" target=\"_blank\" rel=\"noopener\"><strong>Shell 在线工具</strong></a></p>\n<hr>\n<h2 id=\"Shell-脚本\">Shell 脚本<a href=\"2019/09/29/【转载】Shell教程#Shell-脚本\"></a></h2><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p>\n<p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p>\n<p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p>\n<hr>\n<h2 id=\"Shell-环境\">Shell 环境<a href=\"2019/09/29/【转载】Shell教程#Shell-环境\"></a></h2><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Linux 的 Shell 种类众多，常见的有：</p>\n<ul>\n<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（/usr/bin/csh）</li>\n<li>K Shell（/usr/bin/ksh）</li>\n<li>Shell for Root（/sbin/sh）</li>\n<li>……</li>\n</ul>\n<p>本教程关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p>\n<p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p>\n<p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p>\n<hr>\n<h2 id=\"第一个shell脚本\">第一个shell脚本<a href=\"2019/09/29/【转载】Shell教程#第一个shell脚本\"></a></h2><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p>\n<p>输入一些代码，第一行一般是这样：</p>\n<h2 id=\"实例\">实例<a href=\"2019/09/29/【转载】Shell教程#实例\"></a></h2><p><em>#!/bin/bash</em><br><strong>echo</strong> “Hello World !”</p>\n<p><a href=\"https://www.runoob.com/try/runcode.php?filename=helloworld&type=bash\" target=\"_blank\" rel=\"noopener\">运行实例 »</a></p>\n<p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p>\n<p>echo 命令用于向窗口输出文本。</p>\n<h3 id=\"运行-Shell-脚本有两种方法：\">运行 Shell 脚本有两种方法：<a href=\"2019/09/29/【转载】Shell教程#运行-Shell-脚本有两种方法：\"></a></h3><p><strong>1、作为可执行程序</strong></p>\n<p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class=\"line\">./test.sh  #执行脚本</span><br></pre></td></tr></table></div></figure>\n\n<p>注意，一定要写成 <strong>./test.sh</strong>，而不是 <strong>test.sh</strong>，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<p><strong>2、作为解释器参数</strong></p>\n<p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh test.sh</span><br><span class=\"line\">/bin/php test.php</span><br></pre></td></tr></table></div></figure>\n\n<p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p>\n<h1 id=\"Shell-变量\">Shell 变量<a href=\"2019/09/29/【转载】Shell教程#Shell-变量\"></a></h1><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=&quot;runoob.com&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<p>有效的 Shell 变量名示例如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUNOOB</span><br><span class=\"line\">LD_LIBRARY_PATH</span><br><span class=\"line\">_var</span><br><span class=\"line\">var2</span><br></pre></td></tr></table></div></figure>\n\n<p>无效的变量命名：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?var=123</span><br><span class=\"line\">user*name=runoob</span><br></pre></td></tr></table></div></figure>\n\n<p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls /etc`</span><br><span class=\"line\">或</span><br><span class=\"line\">for file in $(ls /etc)</span><br></pre></td></tr></table></div></figure>\n\n<p>以上语句将 /etc 下目录的文件名循环出来。</p>\n<hr>\n<h3 id=\"使用变量\">使用变量<a href=\"2019/09/29/【转载】Shell教程#使用变量\"></a></h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=&quot;qinjx&quot;</span><br><span class=\"line\">echo $your_name</span><br><span class=\"line\">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for skill in Ada Coffe Action Java; do</span><br><span class=\"line\">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>\n<p>推荐给所有变量加上花括号，这是个好的编程习惯。</p>\n<p>已定义的变量，可以被重新定义，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=&quot;tom&quot;</span><br><span class=\"line\">echo $your_name</span><br><span class=\"line\">your_name=&quot;alibaba&quot;</span><br><span class=\"line\">echo $your_name</span><br></pre></td></tr></table></div></figure>\n\n<p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符（$）。</p>\n<h3 id=\"只读变量\">只读变量<a href=\"2019/09/29/【转载】Shell教程#只读变量\"></a></h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>\n<p>下面的例子尝试更改只读变量，结果报错：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">myUrl=&quot;http://www.google.com&quot;</span><br><span class=\"line\">readonly myUrl</span><br><span class=\"line\">myUrl=&quot;http://www.runoob.com&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>运行脚本，结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh: NAME: This variable is read only.</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"删除变量\">删除变量<a href=\"2019/09/29/【转载】Shell教程#删除变量\"></a></h3><p>使用 unset 命令可以删除变量。语法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset variable_name</span><br></pre></td></tr></table></div></figure>\n\n<p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">myUrl=&quot;http://www.runoob.com&quot;</span><br><span class=\"line\">unset myUrl</span><br><span class=\"line\">echo $myUrl</span><br></pre></td></tr></table></div></figure>\n\n<p>以上实例执行将没有任何输出。</p>\n<h3 id=\"变量类型\">变量类型<a href=\"2019/09/29/【转载】Shell教程#变量类型\"></a></h3><p>运行shell时，会同时存在三种变量：</p>\n<ul>\n<li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li>\n<li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li>\n<li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li>\n</ul>\n<hr>\n<h2 id=\"Shell-字符串\">Shell 字符串<a href=\"2019/09/29/【转载】Shell教程#Shell-字符串\"></a></h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p>\n<h3 id=\"单引号\">单引号<a href=\"2019/09/29/【转载】Shell教程#单引号\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=&apos;this is a string&apos;</span><br></pre></td></tr></table></div></figure>\n\n<p>单引号字符串的限制：</p>\n<ul>\n<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>\n<li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n<h3 id=\"双引号\">双引号<a href=\"2019/09/29/【转载】Shell教程#双引号\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=&apos;runoob&apos;</span><br><span class=\"line\">str=&quot;Hello, I know you are \\&quot;$your_name\\&quot;! \\n&quot;</span><br><span class=\"line\">echo -e $str</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, I know you are &quot;runoob&quot;!</span><br></pre></td></tr></table></div></figure>\n\n<p>双引号的优点：</p>\n<ul>\n<li>双引号里可以有变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n<h3 id=\"拼接字符串\">拼接字符串<a href=\"2019/09/29/【转载】Shell教程#拼接字符串\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=&quot;runoob&quot;</span><br><span class=\"line\"># 使用双引号拼接</span><br><span class=\"line\">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</span><br><span class=\"line\">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</span><br><span class=\"line\">echo $greeting  $greeting_1</span><br><span class=\"line\"># 使用单引号拼接</span><br><span class=\"line\">greeting_2=&apos;hello, &apos;$your_name&apos; !&apos;</span><br><span class=\"line\">greeting_3=&apos;hello, $&#123;your_name&#125; !&apos;</span><br><span class=\"line\">echo $greeting_2  $greeting_3</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello, runoob ! hello, runoob !</span><br><span class=\"line\">hello, runoob ! hello, $&#123;your_name&#125; !</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取字符串长度\">获取字符串长度<a href=\"2019/09/29/【转载】Shell教程#获取字符串长度\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;abcd&quot;</span><br><span class=\"line\">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"提取子字符串\">提取子字符串<a href=\"2019/09/29/【转载】Shell教程#提取子字符串\"></a></h3><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;runoob is a great site&quot;</span><br><span class=\"line\">echo $&#123;string:1:4&#125; # 输出 unoo</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查找子字符串\">查找子字符串<a href=\"2019/09/29/【转载】Shell教程#查找子字符串\"></a></h3><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;runoob is a great site&quot;</span><br><span class=\"line\">echo `expr index &quot;$string&quot; io`  # 输出 4</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 <strong>‘</strong>，不要看错了哦。</p>\n<hr>\n<h2 id=\"Shell-数组\">Shell 数组<a href=\"2019/09/29/【转载】Shell教程#Shell-数组\"></a></h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>\n<p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p>\n<h3 id=\"定义数组\">定义数组<a href=\"2019/09/29/【转载】Shell教程#定义数组\"></a></h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></div></figure>\n\n<p>例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=(value0 value1 value2 value3)</span><br></pre></td></tr></table></div></figure>\n\n<p>或者</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=(</span><br><span class=\"line\">value0</span><br><span class=\"line\">value1</span><br><span class=\"line\">value2</span><br><span class=\"line\">value3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>还可以单独定义数组的各个分量：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name[0]=value0</span><br><span class=\"line\">array_name[1]=value1</span><br><span class=\"line\">array_name[n]=valuen</span><br></pre></td></tr></table></div></figure>\n\n<p>可以不使用连续的下标，而且下标的范围没有限制。</p>\n<h3 id=\"读取数组\">读取数组<a href=\"2019/09/29/【转载】Shell教程#读取数组\"></a></h3><p>读取数组元素值的一般格式是：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;数组名[下标]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valuen=$&#123;array_name[n]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取数组的长度\">获取数组的长度<a href=\"2019/09/29/【转载】Shell教程#获取数组的长度\"></a></h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 取得数组元素的个数</span><br><span class=\"line\">length=$&#123;#array_name[@]&#125;</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">length=$&#123;#array_name[*]&#125;</span><br><span class=\"line\"># 取得数组单个元素的长度</span><br><span class=\"line\">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"Shell-注释\">Shell 注释<a href=\"2019/09/29/【转载】Shell教程#Shell-注释\"></a></h2><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p>\n<p>通过每一行加一个 <strong>#</strong> 号设置多行注释，像这样：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\"># 这是一个注释</span><br><span class=\"line\"># author：菜鸟教程</span><br><span class=\"line\"># site：www.runoob.com</span><br><span class=\"line\"># slogan：学的不仅是技术，更是梦想！</span><br><span class=\"line\">#--------------------------------------------</span><br><span class=\"line\">##### 用户配置区 开始 #####</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># 这里可以添加脚本描述信息</span><br><span class=\"line\"># </span><br><span class=\"line\">#</span><br><span class=\"line\">##### 用户配置区 结束  #####</span><br></pre></td></tr></table></div></figure>\n\n<p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p>\n<p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p>\n<h3 id=\"多行注释\">多行注释<a href=\"2019/09/29/【转载】Shell教程#多行注释\"></a></h3><p>多行注释还可以使用以下格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;EOF</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></div></figure>\n\n<p>EOF 也可以使用其他符号:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;&apos;</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">:&lt;&lt;!</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">注释内容...</span><br><span class=\"line\">!</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-传递参数\">Shell 传递参数<a href=\"2019/09/29/【转载】Shell教程#Shell-传递参数\"></a></h1><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<strong>$n</strong>。<strong>n</strong> 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>\n<h3 id=\"实例-1\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-1\"></a></h3><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class=\"line\">echo &quot;执行的文件名：$0&quot;;</span><br><span class=\"line\">echo &quot;第一个参数为：$1&quot;;</span><br><span class=\"line\">echo &quot;第二个参数为：$2&quot;;</span><br><span class=\"line\">echo &quot;第三个参数为：$3&quot;;</span><br></pre></td></tr></table></div></figure>\n\n<p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh 1 2 3</span><br><span class=\"line\">Shell 传递参数实例！</span><br><span class=\"line\">执行的文件名：./test.sh</span><br><span class=\"line\">第一个参数为：1</span><br><span class=\"line\">第二个参数为：2</span><br><span class=\"line\">第三个参数为：3</span><br></pre></td></tr></table></div></figure>\n\n<p>另外，还有几个特殊字符用来处理参数：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数处理</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$#</td>\n<td align=\"left\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$$</td>\n<td align=\"left\">脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$!</td>\n<td align=\"left\">后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$-</td>\n<td align=\"left\">显示Shell使用的当前选项，与<a href=\"https://www.runoob.com/linux/linux-comm-set.html\" target=\"_blank\" rel=\"noopener\">set命令</a>功能相同。</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table></div></div>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class=\"line\">echo &quot;第一个参数为：$1&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;参数个数为：$#&quot;;</span><br><span class=\"line\">echo &quot;传递的参数作为一个字符串显示：$*&quot;;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh 1 2 3</span><br><span class=\"line\">Shell 传递参数实例！</span><br><span class=\"line\">第一个参数为：1</span><br><span class=\"line\">参数个数为：3</span><br><span class=\"line\">传递的参数作为一个字符串显示：1 2 3</span><br></pre></td></tr></table></div></figure>\n\n<p>$* 与 $@ 区别：</p>\n<ul>\n<li>相同点：都是引用所有参数。</li>\n<li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;-- \\$* 演示 ---&quot;</span><br><span class=\"line\">for i in &quot;$*&quot;; do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;-- \\$@ 演示 ---&quot;</span><br><span class=\"line\">for i in &quot;$@&quot;; do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh 1 2 3</span><br><span class=\"line\">-- $* 演示 ---</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">-- $@ 演示 ---</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-数组-1\">Shell 数组<a href=\"2019/09/29/【转载】Shell教程#Shell-数组-1\"></a></h1><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</p>\n<p>与大部分编程语言类似，数组元素的下标由0开始。</p>\n<p>Shell 数组用括号来表示，元素用”空格”符号分割开，语法格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=(value1 ... valuen)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"实例-2\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-2\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">my_array=(A B &quot;C&quot; D)</span><br></pre></td></tr></table></div></figure>\n\n<p>我们也可以使用下标来定义数组:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name[0]=value0</span><br><span class=\"line\">array_name[1]=value1</span><br><span class=\"line\">array_name[2]=value2</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"读取数组-1\">读取数组<a href=\"2019/09/29/【转载】Shell教程#读取数组-1\"></a></h3><p>读取数组元素值的一般格式是：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;array_name[index]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"实例-3\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-3\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">my_array=(A B &quot;C&quot; D)</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;</span><br><span class=\"line\">echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;</span><br><span class=\"line\">echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;</span><br><span class=\"line\">echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh</span><br><span class=\"line\">第一个元素为: A</span><br><span class=\"line\">第二个元素为: B</span><br><span class=\"line\">第三个元素为: C</span><br><span class=\"line\">第四个元素为: D</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取数组中的所有元素\">获取数组中的所有元素<a href=\"2019/09/29/【转载】Shell教程#获取数组中的所有元素\"></a></h3><p>使用@ 或 * 可以获取数组中的所有元素，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">my_array[0]=A</span><br><span class=\"line\">my_array[1]=B</span><br><span class=\"line\">my_array[2]=C</span><br><span class=\"line\">my_array[3]=D</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;</span><br><span class=\"line\">echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh</span><br><span class=\"line\">数组的元素为: A B C D</span><br><span class=\"line\">数组的元素为: A B C D</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"获取数组的长度-1\">获取数组的长度<a href=\"2019/09/29/【转载】Shell教程#获取数组的长度-1\"></a></h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">my_array[0]=A</span><br><span class=\"line\">my_array[1]=B</span><br><span class=\"line\">my_array[2]=C</span><br><span class=\"line\">my_array[3]=D</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;数组元素个数为: $&#123;#my_array[*]&#125;&quot;</span><br><span class=\"line\">echo &quot;数组元素个数为: $&#123;#my_array[@]&#125;&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test.sh </span><br><span class=\"line\">$ ./test.sh</span><br><span class=\"line\">数组元素个数为: 4</span><br><span class=\"line\">数组元素个数为: 4</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-基本运算符\">Shell 基本运算符<a href=\"2019/09/29/【转载】Shell教程#Shell-基本运算符\"></a></h1><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p>\n<ul>\n<li>算数运算符</li>\n<li>关系运算符</li>\n<li>布尔运算符</li>\n<li>字符串运算符</li>\n<li>文件测试运算符</li>\n</ul>\n<p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p>\n<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>\n<p>例如，两个数相加(<strong>注意使用的是反引号 ` 而不是单引号 ‘</strong>)：</p>\n<h2 id=\"实例-4\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-4\"></a></h2><p><em>#!/bin/bash</em></p>\n<p>val=<strong>`**</strong>expr** 2 + 2<strong>`</strong><br><strong>echo</strong> “两数之和为 : $val”</p>\n<p><a href=\"https://www.runoob.com/try/runcode.php?filename=add2data&type=bash\" target=\"_blank\" rel=\"noopener\">运行实例 »</a></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两数之和为 : 4</span><br></pre></td></tr></table></div></figure>\n\n<p>两点注意：</p>\n<ul>\n<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>\n<li>完整的表达式要被 <strong><code></code></strong> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li>\n</ul>\n<hr>\n<h2 id=\"算术运算符\">算术运算符<a href=\"2019/09/29/【转载】Shell教程#算术运算符\"></a></h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法</td>\n<td align=\"left\"><code>expr $a + $b</code> 结果为 30。</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法</td>\n<td align=\"left\"><code>expr $a - $b</code> 结果为 -10。</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法</td>\n<td align=\"left\"><code>expr $a \\* $b</code> 结果为  200。</td>\n</tr>\n<tr>\n<td align=\"left\">/</td>\n<td align=\"left\">除法</td>\n<td align=\"left\"><code>expr $b / $a</code> 结果为 2。</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取余</td>\n<td align=\"left\"><code>expr $b % $a</code> 结果为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">=</td>\n<td align=\"left\">赋值</td>\n<td align=\"left\">a=$b 将把变量 b 的值赋给 a。</td>\n</tr>\n<tr>\n<td align=\"left\">==</td>\n<td align=\"left\">相等。用于比较两个数字，相同则返回 true。</td>\n<td align=\"left\">[ $a == $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不相等。用于比较两个数字，不相同则返回 true。</td>\n<td align=\"left\">[ $a != $b ] 返回 true。</td>\n</tr>\n</tbody></table></div></div>\n<p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p>\n<h3 id=\"实例-5\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-5\"></a></h3><p>算术运算符实例如下：</p>\n<h2 id=\"实例-6\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-6\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>a=10<br>b=20</p>\n<p>val=<strong>`**</strong>expr** $a + $b<strong>`</strong><br><strong>echo</strong> “a + b : $val”</p>\n<p>val=<strong>`**</strong>expr** $a - $b<strong>`</strong><br><strong>echo</strong> “a - b : $val”</p>\n<p>val=<strong>`**</strong>expr** $a *<strong>** $b</strong>`**<br><strong>echo</strong> “a * b : $val”</p>\n<p>val=<strong>`**</strong>expr** $b <strong>/</strong> $a<strong>`</strong><br><strong>echo</strong> “b / a : $val”</p>\n<p>val=<strong>`**</strong>expr** $b <strong>%</strong> $a<strong>`</strong><br><strong>echo</strong> “b % a : $val”</p>\n<p><strong>if</strong> <strong>[</strong> $a == $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “a 不等于 b”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a + b : 30</span><br><span class=\"line\">a - b : -10</span><br><span class=\"line\">a * b : 200</span><br><span class=\"line\">b / a : 2</span><br><span class=\"line\">b % a : 0</span><br><span class=\"line\">a 不等于 b</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p><strong>注意：</strong></p>\n<ul>\n<li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li>\n<li>if…then…fi 是条件语句，后续将会讲解。</li>\n<li>在 MAC 中 shell 的 expr 语法是：<strong>$((表达式))</strong>，此处表达式中的 “*” 不需要转义符号 “&quot; 。</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"关系运算符\">关系运算符<a href=\"2019/09/29/【转载】Shell教程#关系运算符\"></a></h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">检测两个数是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a -eq $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">检测两个数是否不相等，不相等返回 true。</td>\n<td align=\"left\">[ $a -ne $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -gt $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -lt $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -ge $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td align=\"left\">[ $a -le $b ] 返回 true。</td>\n</tr>\n</tbody></table></div></div>\n<h3 id=\"实例-7\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-7\"></a></h3><p>关系运算符实例如下：</p>\n<h2 id=\"实例-8\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-8\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>a=10<br>b=20</p>\n<p><strong>if</strong> <strong>[</strong> $a -eq $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -eq $b : a 等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -eq $b: a 不等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -ne $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -ne $b: a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -ne $b : a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -gt $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -gt $b: a 大于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -gt $b: a 不大于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -lt $b: a 小于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -lt $b: a 不小于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -ge $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -ge $b: a 大于或等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -ge $b: a 小于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -le $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -le $b: a 小于或等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -le $b: a 大于 b”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 -eq 20: a 不等于 b</span><br><span class=\"line\">10 -ne 20: a 不等于 b</span><br><span class=\"line\">10 -gt 20: a 不大于 b</span><br><span class=\"line\">10 -lt 20: a 小于 b</span><br><span class=\"line\">10 -ge 20: a 小于 b</span><br><span class=\"line\">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"布尔运算符\">布尔运算符<a href=\"2019/09/29/【转载】Shell教程#布尔运算符\"></a></h2><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">!</td>\n<td align=\"left\">非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td align=\"left\">[ ! false ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-o</td>\n<td align=\"left\">或运算，有一个表达式为 true 则返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">与运算，两个表达式都为 true 才返回 true。</td>\n<td align=\"left\">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>\n</tr>\n</tbody></table></div></div>\n<h3 id=\"实例-9\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-9\"></a></h3><p>布尔运算符实例如下：</p>\n<h2 id=\"实例-10\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-10\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>a=10<br>b=20</p>\n<p><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a != $b : a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a == $b: a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 100 -a $b -gt 15 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 100 且 $b 大于 15 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 100 且 $b 大于 15 : 返回 false”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 100 -o $b -gt 100 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 100 或 $b 大于 100 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 100 或 $b 大于 100 : 返回 false”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 5 -o $b -gt 100 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 5 或 $b 大于 100 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 5 或 $b 大于 100 : 返回 false”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 != 20 : a 不等于 b</span><br><span class=\"line\">10 小于 100 且 20 大于 15 : 返回 true</span><br><span class=\"line\">10 小于 100 或 20 大于 100 : 返回 true</span><br><span class=\"line\">10 小于 5 或 20 大于 100 : 返回 false</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"逻辑运算符\">逻辑运算符<a href=\"2019/09/29/【转载】Shell教程#逻辑运算符\"></a></h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑的 AND</td>\n<td align=\"left\">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑的 OR</td>\n<td align=\"left\">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td>\n</tr>\n</tbody></table></div></div>\n<h3 id=\"实例-11\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-11\"></a></h3><p>逻辑运算符实例如下：</p>\n<h2 id=\"实例-12\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-12\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>a=10<br>b=20</p>\n<p><strong>if</strong> <strong>[**</strong>[** $a -lt 100 <strong>&amp;&amp;</strong> $b -gt 100 <strong>]**</strong>]**<br><strong>then</strong><br>   <strong>echo</strong> “返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “返回 false”<br><strong>fi</strong></p>\n<p><strong>if</strong> <strong>[**</strong>[** $a -lt 100 <strong>||</strong> $b -gt 100 <strong>]**</strong>]**<br><strong>then</strong><br>   <strong>echo</strong> “返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “返回 false”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回 false</span><br><span class=\"line\">返回 true</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"字符串运算符\">字符串运算符<a href=\"2019/09/29/【转载】Shell教程#字符串运算符\"></a></h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">检测两个字符串是否相等，相等返回 true。</td>\n<td align=\"left\">[ $a = $b ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">检测两个字符串是否相等，不相等返回 true。</td>\n<td align=\"left\">[ $a != $b ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-z</td>\n<td align=\"left\">检测字符串长度是否为0，为0返回 true。</td>\n<td align=\"left\">[ -z $a ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">检测字符串长度是否为0，不为0返回 true。</td>\n<td align=\"left\">[ -n “$a” ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">检测字符串是否为空，不为空返回 true。</td>\n<td align=\"left\">[ $a ] 返回 true。</td>\n</tr>\n</tbody></table></div></div>\n<h3 id=\"实例-13\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-13\"></a></h3><p>字符串运算符实例如下：</p>\n<h2 id=\"实例-14\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-14\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>a=”abc”<br>b=”efg”</p>\n<p><strong>if</strong> <strong>[</strong> $a = $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a = $b : a 等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a = $b: a 不等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a != $b : a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a != $b: a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -z $a <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “-z $a : 字符串长度为 0”<br><strong>else</strong><br>   <strong>echo</strong> “-z $a : 字符串长度不为 0”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -n “$a” <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “-n $a : 字符串长度不为 0”<br><strong>else</strong><br>   <strong>echo</strong> “-n $a : 字符串长度为 0”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a : 字符串不为空”<br><strong>else</strong><br>   <strong>echo</strong> “$a : 字符串为空”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc = efg: a 不等于 b</span><br><span class=\"line\">abc != efg : a 不等于 b</span><br><span class=\"line\">-z abc : 字符串长度不为 0</span><br><span class=\"line\">-n abc : 字符串长度不为 0</span><br><span class=\"line\">abc : 字符串不为空</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"文件测试运算符\">文件测试运算符<a href=\"2019/09/29/【转载】Shell教程#文件测试运算符\"></a></h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n<p>属性检测描述如下：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b file</td>\n<td align=\"left\">检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -b $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-c file</td>\n<td align=\"left\">检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td align=\"left\">[ -c $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-d file</td>\n<td align=\"left\">检测文件是否是目录，如果是，则返回 true。</td>\n<td align=\"left\">[ -d $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-f file</td>\n<td align=\"left\">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td align=\"left\">[ -f $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-g file</td>\n<td align=\"left\">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -g $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-k file</td>\n<td align=\"left\">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>\n<td align=\"left\">[ -k $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-p file</td>\n<td align=\"left\">检测文件是否是有名管道，如果是，则返回 true。</td>\n<td align=\"left\">[ -p $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-u file</td>\n<td align=\"left\">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td align=\"left\">[ -u $file ] 返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\">-r file</td>\n<td align=\"left\">检测文件是否可读，如果是，则返回 true。</td>\n<td align=\"left\">[ -r $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-w file</td>\n<td align=\"left\">检测文件是否可写，如果是，则返回 true。</td>\n<td align=\"left\">[ -w $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-x file</td>\n<td align=\"left\">检测文件是否可执行，如果是，则返回 true。</td>\n<td align=\"left\">[ -x $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-s file</td>\n<td align=\"left\">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>\n<td align=\"left\">[ -s $file ] 返回 true。</td>\n</tr>\n<tr>\n<td align=\"left\">-e file</td>\n<td align=\"left\">检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td align=\"left\">[ -e $file ] 返回 true。</td>\n</tr>\n</tbody></table></div></div>\n<p>其他检查符：</p>\n<ul>\n<li><strong>-S</strong>: 判断某文件是否 socket。</li>\n<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li>\n</ul>\n<h3 id=\"实例-15\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-15\"></a></h3><p>变量 file 表示文件 <strong>/var/www/runoob/test.sh**</strong>rwx**</p>\n<h2 id=\"实例-16\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-16\"></a></h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a></em></p>\n<p>file=”/var/www/runoob/test.sh”<br><strong>if</strong> <strong>[</strong> -r $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可读”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可读”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -w $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可写”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可写”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -x $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可执行”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可执行”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -f $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件为普通文件”<br><strong>else</strong><br>   <strong>echo</strong> “文件为特殊文件”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -d $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件是个目录”<br><strong>else</strong><br>   <strong>echo</strong> “文件不是个目录”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -s $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件不为空”<br><strong>else</strong><br>   <strong>echo</strong> “文件为空”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -e $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件存在”<br><strong>else</strong><br>   <strong>echo</strong> “文件不存在”<br><strong>fi</strong></p>\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件可读</span><br><span class=\"line\">文件可写</span><br><span class=\"line\">文件可执行</span><br><span class=\"line\">文件为普通文件</span><br><span class=\"line\">文件不是个目录</span><br><span class=\"line\">文件不为空</span><br><span class=\"line\">文件存在</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Shell-echo命令\">Shell echo命令<a href=\"2019/09/29/【转载】Shell教程#Shell-echo命令\"></a></h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo string</span><br></pre></td></tr></table></div></figure>\n\n<p>您可以使用echo实现更复杂的输出格式控制。</p>\n<h3 id=\"1-显示普通字符串\">1.显示普通字符串:<a href=\"2019/09/29/【转载】Shell教程#1-显示普通字符串\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;It is a test&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo It is a test</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"2-显示转义字符\">2.显示转义字符<a href=\"2019/09/29/【转载】Shell教程#2-显示转义字符\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;\\&quot;It is a test\\&quot;&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>结果将是:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;It is a test&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>同样，双引号也可以省略</p>\n<h3 id=\"3-显示变量\">3.显示变量<a href=\"2019/09/29/【转载】Shell教程#3-显示变量\"></a></h3><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">read name </span><br><span class=\"line\">echo &quot;$name It is a test&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# sh test.sh</span><br><span class=\"line\">OK                     #标准输入</span><br><span class=\"line\">OK It is a test        #输出</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"4-显示换行\">4.显示换行<a href=\"2019/09/29/【转载】Shell教程#4-显示换行\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &quot;OK! \\n&quot; # -e 开启转义</span><br><span class=\"line\">echo &quot;It is a test&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK!</span><br><span class=\"line\"></span><br><span class=\"line\">It is a test</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"5-显示不换行\">5.显示不换行<a href=\"2019/09/29/【转载】Shell教程#5-显示不换行\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">echo -e &quot;OK! \\c&quot; # -e 开启转义 \\c 不换行</span><br><span class=\"line\">echo &quot;It is a test&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK! It is a test</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"6-显示结果定向至文件\">6.显示结果定向至文件<a href=\"2019/09/29/【转载】Shell教程#6-显示结果定向至文件\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;It is a test&quot; &gt; myfile</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"7-原样输出字符串，不进行转义或取变量-用单引号\">7.原样输出字符串，不进行转义或取变量(用单引号)<a href=\"2019/09/29/【转载】Shell教程#7-原样输出字符串，不进行转义或取变量-用单引号\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;$name\\&quot;&apos;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$name\\&quot;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"8-显示命令执行结果\">8.显示命令执行结果<a href=\"2019/09/29/【转载】Shell教程#8-显示命令执行结果\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `date`</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>注意：</strong> 这里使用的是反引号 <strong>`</strong>, 而不是单引号 <strong>‘</strong>。</p>\n<p>结果将显示当前日期</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Jul 24 10:08:46 CST 2014</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-printf-命令\">Shell printf 命令<a href=\"2019/09/29/【转载】Shell教程#Shell-printf-命令\"></a></h1><p>上一章节我们学习了 Shell 的 echo 命令，本章节我们来学习 Shell 的另一个输出命令 printf。</p>\n<p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p>\n<p>printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p>\n<p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \\n。</p>\n<p>printf 命令的语法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf  format-string  [arguments...]</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>format-string:</strong> 为格式控制字符串</li>\n<li><strong>arguments:</strong> 为参数列表。</li>\n</ul>\n<p>实例如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;Hello, Shell&quot;</span><br><span class=\"line\">Hello, Shell</span><br><span class=\"line\">$ printf &quot;Hello, Shell\\n&quot;</span><br><span class=\"line\">Hello, Shell</span><br><span class=\"line\">$</span><br></pre></td></tr></table></div></figure>\n\n<p>接下来,我来用一个脚本来体现printf的强大功能：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"> </span><br><span class=\"line\">printf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg  </span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234 </span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543 </span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">姓名     性别   体重kg</span><br><span class=\"line\">郭靖     男      66.12</span><br><span class=\"line\">杨过     男      48.65</span><br><span class=\"line\">郭芙     女      47.99</span><br></pre></td></tr></table></div></figure>\n\n<p>%s %c %d %f都是格式替代符</p>\n<p>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>\n<p>更多实例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"> </span><br><span class=\"line\"># format-string为双引号</span><br><span class=\"line\">printf &quot;%d %s\\n&quot; 1 &quot;abc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 单引号与双引号效果一样 </span><br><span class=\"line\">printf &apos;%d %s\\n&apos; 1 &quot;abc&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"># 没有引号也可以输出</span><br><span class=\"line\">printf %s abcdef</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span><br><span class=\"line\">printf %s abc def</span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%s\\n&quot; abc def</span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%s %s %s\\n&quot; a b c d e f g h i j</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span><br><span class=\"line\">printf &quot;%s and %d \\n&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行脚本，输出结果如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 abc</span><br><span class=\"line\">1 abc</span><br><span class=\"line\">abcdefabcdefabc</span><br><span class=\"line\">def</span><br><span class=\"line\">a b c</span><br><span class=\"line\">d e f</span><br><span class=\"line\">g h i</span><br><span class=\"line\">j  </span><br><span class=\"line\"> and 0</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"printf的转义序列\">printf的转义序列<a href=\"2019/09/29/【转载】Shell教程#printf的转义序列\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">序列</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\a</td>\n<td align=\"left\">警告字符，通常为ASCII的BEL字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">后退</td>\n</tr>\n<tr>\n<td align=\"left\">\\c</td>\n<td align=\"left\">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页（formfeed）</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车（Carriage return）</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">水平制表符</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">垂直制表符</td>\n</tr>\n<tr>\n<td align=\"left\">\\</td>\n<td align=\"left\">一个字面上的反斜杠字符</td>\n</tr>\n<tr>\n<td align=\"left\">\\ddd</td>\n<td align=\"left\">表示1到3位数八进制值的字符。仅在格式字符串中有效</td>\n</tr>\n<tr>\n<td align=\"left\">\\0ddd</td>\n<td align=\"left\">表示1到3位的八进制值字符</td>\n</tr>\n</tbody></table></div></div>\n<h3 id=\"实例-17\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-17\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ printf &quot;a string, no processing:&lt;%s&gt;\\n&quot; &quot;A\\nB&quot;</span><br><span class=\"line\">a string, no processing:&lt;A\\nB&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ printf &quot;a string, no processing:&lt;%b&gt;\\n&quot; &quot;A\\nB&quot;</span><br><span class=\"line\">a string, no processing:&lt;A</span><br><span class=\"line\">B&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ printf &quot;www.runoob.com \\a&quot;</span><br><span class=\"line\">www.runoob.com $                  #不换行</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-test-命令\">Shell test 命令<a href=\"2019/09/29/【转载】Shell教程#Shell-test-命令\"></a></h1><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p>\n<hr>\n<h2 id=\"数值测试\">数值测试<a href=\"2019/09/29/【转载】Shell教程#数值测试\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-eq</td>\n<td align=\"left\">等于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-ne</td>\n<td align=\"left\">不等于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-gt</td>\n<td align=\"left\">大于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-ge</td>\n<td align=\"left\">大于等于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-lt</td>\n<td align=\"left\">小于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-le</td>\n<td align=\"left\">小于等于则为真</td>\n</tr>\n</tbody></table></div></div>\n<p>实例演示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1=100</span><br><span class=\"line\">num2=100</span><br><span class=\"line\">if test $[num1] -eq $[num2]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &apos;两个数相等！&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &apos;两个数不相等！&apos;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个数相等！</span><br></pre></td></tr></table></div></figure>\n\n<p>代码中的 [] 执行基本的算数运算，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">a=5</span><br><span class=\"line\">b=6</span><br><span class=\"line\"></span><br><span class=\"line\">result=$[a+b] # 注意等号两边不能有空格</span><br><span class=\"line\">echo &quot;result 为： $result&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>结果为:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result 为： 11</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"字符串测试\">字符串测试<a href=\"2019/09/29/【转载】Shell教程#字符串测试\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">等于则为真</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不相等则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-z 字符串</td>\n<td align=\"left\">字符串的长度为零则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-n 字符串</td>\n<td align=\"left\">字符串的长度不为零则为真</td>\n</tr>\n</tbody></table></div></div>\n<p>实例演示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1=&quot;ru1noob&quot;</span><br><span class=\"line\">num2=&quot;runoob&quot;</span><br><span class=\"line\">if test $num1 = $num2</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &apos;两个字符串相等!&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &apos;两个字符串不相等!&apos;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个字符串不相等!</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"文件测试\">文件测试<a href=\"2019/09/29/【转载】Shell教程#文件测试\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-e 文件名</td>\n<td align=\"left\">如果文件存在则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-r 文件名</td>\n<td align=\"left\">如果文件存在且可读则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-w 文件名</td>\n<td align=\"left\">如果文件存在且可写则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-x 文件名</td>\n<td align=\"left\">如果文件存在且可执行则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-s 文件名</td>\n<td align=\"left\">如果文件存在且至少有一个字符则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-d 文件名</td>\n<td align=\"left\">如果文件存在且为目录则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-f 文件名</td>\n<td align=\"left\">如果文件存在且为普通文件则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-c 文件名</td>\n<td align=\"left\">如果文件存在且为字符型特殊文件则为真</td>\n</tr>\n<tr>\n<td align=\"left\">-b 文件名</td>\n<td align=\"left\">如果文件存在且为块特殊文件则为真</td>\n</tr>\n</tbody></table></div></div>\n<p>实例演示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /bin</span><br><span class=\"line\">if test -e ./bash</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &apos;文件已存在!&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &apos;文件不存在!&apos;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件已存在!</span><br></pre></td></tr></table></div></figure>\n\n<p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /bin</span><br><span class=\"line\">if test -e ./notFile -o -e ./bash</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &apos;至少有一个文件存在!&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &apos;两个文件都不存在&apos;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">至少有一个文件存在!</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Shell-流程控制\">Shell 流程控制<a href=\"2019/09/29/【转载】Shell教程#Shell-流程控制\"></a></h1><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">if (isset($_GET[&quot;q&quot;])) &#123;</span><br><span class=\"line\">    search(q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    // 不做任何事情</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p>\n<hr>\n<h2 id=\"if-else\">if else<a href=\"2019/09/29/【转载】Shell教程#if-else\"></a></h2><h3 id=\"if\">if<a href=\"2019/09/29/【转载】Shell教程#if\"></a></h3><p>if 语句语法格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    command1 </span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN </span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>写成一行（适用于终端命令提示符）：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi</span><br></pre></td></tr></table></div></figure>\n\n<p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p>\n<h3 id=\"if-else-1\">if else<a href=\"2019/09/29/【转载】Shell教程#if-else-1\"></a></h3><p>if else 语法格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    command1 </span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">else</span><br><span class=\"line\">    command</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"if-else-if-else\">if else-if else<a href=\"2019/09/29/【转载】Shell教程#if-else-if-else\"></a></h3><p>if else-if else 语法格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition1</span><br><span class=\"line\">then</span><br><span class=\"line\">    command1</span><br><span class=\"line\">elif condition2 </span><br><span class=\"line\">then </span><br><span class=\"line\">    command2</span><br><span class=\"line\">else</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>以下实例判断两个变量是否相等：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;a 等于 b&quot;</span><br><span class=\"line\">elif [ $a -gt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;a 大于 b&quot;</span><br><span class=\"line\">elif [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;a 小于 b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;没有符合的条件&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a 小于 b</span><br></pre></td></tr></table></div></figure>\n\n<p>if else语句经常与test命令结合使用，如下所示：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1=$[2*3]</span><br><span class=\"line\">num2=$[1+5]</span><br><span class=\"line\">if test $[num1] -eq $[num2]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &apos;两个数字相等!&apos;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &apos;两个数字不相等!&apos;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个数字相等!</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"for-循环\">for 循环<a href=\"2019/09/29/【转载】Shell教程#for-循环\"></a></h2><p>与其他编程语言类似，Shell支持for循环。</p>\n<p>for循环一般格式为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for var in item1 item2 ... itemN</span><br><span class=\"line\">do</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>写成一行：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for var in item1 item2 ... itemN; do command1; command2… done;</span><br></pre></td></tr></table></div></figure>\n\n<p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p>\n<p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p>\n<p>例如，顺序输出当前列表中的数字：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;The value is: $loop&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The value is: 1</span><br><span class=\"line\">The value is: 2</span><br><span class=\"line\">The value is: 3</span><br><span class=\"line\">The value is: 4</span><br><span class=\"line\">The value is: 5</span><br></pre></td></tr></table></div></figure>\n\n<p>顺序输出字符串中的字符：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for str in &apos;This is a string&apos;</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $str</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is a string</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"while-语句\">while 语句<a href=\"2019/09/29/【转载】Shell教程#while-语句\"></a></h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    command</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">int=1</span><br><span class=\"line\">while(( $int&lt;=5 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $int</span><br><span class=\"line\">    let &quot;int++&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>运行脚本，输出：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></div></figure>\n\n<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：<a href=\"https://www.runoob.com/linux/linux-comm-let.html\" target=\"_blank\" rel=\"noopener\">Bash let 命令</a></p>\n<p>。</p>\n<p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<ctrl-d>结束循环。</ctrl-d></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;按下 &lt;CTRL-D&gt; 退出&apos;</span><br><span class=\"line\">echo -n &apos;输入你最喜欢的网站名: &apos;</span><br><span class=\"line\">while read FILM</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;是的！$FILM 是一个好网站&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>运行脚本，输出类似下面：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按下 &lt;CTRL-D&gt; 退出</span><br><span class=\"line\">输入你最喜欢的网站名:菜鸟教程</span><br><span class=\"line\">是的！菜鸟教程 是一个好网站</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"无限循环\">无限循环<a href=\"2019/09/29/【转载】Shell教程#无限循环\"></a></h3><p>无限循环语法格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    command</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>或者</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while true</span><br><span class=\"line\">do</span><br><span class=\"line\">    command</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>或者</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (( ; ; ))</span><br></pre></td></tr></table></div></figure>\n\n\n\n<hr>\n<h2 id=\"until-循环\">until 循环<a href=\"2019/09/29/【转载】Shell教程#until-循环\"></a></h2><p>until 循环执行一系列命令直至条件为 true 时停止。</p>\n<p>until 循环与 while 循环在处理方式上刚好相反。</p>\n<p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>\n<p>until 语法格式:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    command</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p>\n<p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">a=0</span><br><span class=\"line\"></span><br><span class=\"line\">until [ ! $a -lt 10 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">   echo $a</span><br><span class=\"line\">   a=`expr $a + 1`</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>运行结果：</p>\n<p>输出结果为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"case\">case<a href=\"2019/09/29/【转载】Shell教程#case\"></a></h2><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 值 in</span><br><span class=\"line\">模式1)</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">模式2）</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></div></figure>\n\n<p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p>\n<p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p>\n<p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;输入 1 到 4 之间的数字:&apos;</span><br><span class=\"line\">echo &apos;你输入的数字为:&apos;</span><br><span class=\"line\">read aNum</span><br><span class=\"line\">case $aNum in</span><br><span class=\"line\">    1)  echo &apos;你选择了 1&apos;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    2)  echo &apos;你选择了 2&apos;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    3)  echo &apos;你选择了 3&apos;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    4)  echo &apos;你选择了 4&apos;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *)  echo &apos;你没有输入 1 到 4 之间的数字&apos;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></div></figure>\n\n<p>输入不同的内容，会有不同的结果，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 1 到 4 之间的数字:</span><br><span class=\"line\">你输入的数字为:</span><br><span class=\"line\">3</span><br><span class=\"line\">你选择了 3</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"跳出循环\">跳出循环<a href=\"2019/09/29/【转载】Shell教程#跳出循环\"></a></h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p>\n<h3 id=\"break命令\">break命令<a href=\"2019/09/29/【转载】Shell教程#break命令\"></a></h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p>\n<p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    case $aNum in</span><br><span class=\"line\">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class=\"line\">            break</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>执行以上代码，输出结果为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入 1 到 5 之间的数字:3</span><br><span class=\"line\">你输入的数字为 3!</span><br><span class=\"line\">输入 1 到 5 之间的数字:7</span><br><span class=\"line\">你输入的数字不是 1 到 5 之间的! 游戏结束</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"continue\">continue<a href=\"2019/09/29/【转载】Shell教程#continue\"></a></h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>\n<p>对上面的例子进行修改：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo -n &quot;输入 1 到 5 之间的数字: &quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    case $aNum in</span><br><span class=\"line\">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;</span><br><span class=\"line\">            continue</span><br><span class=\"line\">            echo &quot;游戏结束&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n<p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <strong>echo “游戏结束”</strong> 永远不会被执行。</p>\n<hr>\n<h2 id=\"esac\">esac<a href=\"2019/09/29/【转载】Shell教程#esac\"></a></h2><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p>\n<h1 id=\"Shell-函数\">Shell 函数<a href=\"2019/09/29/【转载】Shell教程#Shell-函数\"></a></h1><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p>\n<p>shell中函数的定义格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ function ] funname [()]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    action;</span><br><span class=\"line\"></span><br><span class=\"line\">    [return int;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：</p>\n<ul>\n<li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>\n<li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li>\n</ul>\n<p>下面的例子定义了一个函数并进行调用：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">demoFun()&#123;</span><br><span class=\"line\">    echo &quot;这是我的第一个 shell 函数!&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;-----函数开始执行-----&quot;</span><br><span class=\"line\">demoFun</span><br><span class=\"line\">echo &quot;-----函数执行完毕-----&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----函数开始执行-----</span><br><span class=\"line\">这是我的第一个 shell 函数!</span><br><span class=\"line\">-----函数执行完毕-----</span><br></pre></td></tr></table></div></figure>\n\n<p>下面定义一个带有return语句的函数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">funWithReturn()&#123;</span><br><span class=\"line\">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</span><br><span class=\"line\">    echo &quot;输入第一个数字: &quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    echo &quot;输入第二个数字: &quot;</span><br><span class=\"line\">    read anotherNum</span><br><span class=\"line\">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class=\"line\">    return $(($aNum+$anotherNum))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithReturn</span><br><span class=\"line\">echo &quot;输入的两个数字之和为 $? !&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>输出类似下面：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个函数会对输入的两个数字进行相加运算...</span><br><span class=\"line\">输入第一个数字: </span><br><span class=\"line\">1</span><br><span class=\"line\">输入第二个数字: </span><br><span class=\"line\">2</span><br><span class=\"line\">两个数字分别为 1 和 2 !</span><br><span class=\"line\">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></div></figure>\n\n<p>函数返回值在调用该函数后通过 $? 来获得。</p>\n<p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p>\n<hr>\n<h2 id=\"函数参数\">函数参数<a href=\"2019/09/29/【转载】Shell教程#函数参数\"></a></h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>\n<p>带参数的函数示例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">funWithParam()&#123;</span><br><span class=\"line\">    echo &quot;第一个参数为 $1 !&quot;</span><br><span class=\"line\">    echo &quot;第二个参数为 $2 !&quot;</span><br><span class=\"line\">    echo &quot;第十个参数为 $10 !&quot;</span><br><span class=\"line\">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</span><br><span class=\"line\">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</span><br><span class=\"line\">    echo &quot;参数总数有 $# 个!&quot;</span><br><span class=\"line\">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个参数为 1 !</span><br><span class=\"line\">第二个参数为 2 !</span><br><span class=\"line\">第十个参数为 10 !</span><br><span class=\"line\">第十个参数为 34 !</span><br><span class=\"line\">第十一个参数为 73 !</span><br><span class=\"line\">参数总数有 11 个!</span><br><span class=\"line\">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></div></figure>\n\n<p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p>\n<p>另外，还有几个特殊字符用来处理参数：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">参数处理</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$#</td>\n<td align=\"left\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td align=\"left\">$*</td>\n<td align=\"left\">以一个单字符串显示所有向脚本传递的参数</td>\n</tr>\n<tr>\n<td align=\"left\">$$</td>\n<td align=\"left\">脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$!</td>\n<td align=\"left\">后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td align=\"left\">$@</td>\n<td align=\"left\">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td align=\"left\">$-</td>\n<td align=\"left\">显示Shell使用的当前选项，与set命令功能相同。</td>\n</tr>\n<tr>\n<td align=\"left\">$?</td>\n<td align=\"left\">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>\n</tr>\n</tbody></table></div></div>\n<h1 id=\"Shell-输入-输出重定向\">Shell 输入/输出重定向<a href=\"2019/09/29/【转载】Shell教程#Shell-输入-输出重定向\"></a></h1><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p>\n<p>重定向命令列表如下：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">command &gt; file</td>\n<td align=\"left\">将输出重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &lt; file</td>\n<td align=\"left\">将输入重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">command &gt;&gt; file</td>\n<td align=\"left\">将输出以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&gt; file</td>\n<td align=\"left\">将文件描述符为 n 的文件以追加的方式重定向到 file。</td>\n</tr>\n<tr>\n<td align=\"left\">n &gt;&amp; m</td>\n<td align=\"left\">将输出文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">n &lt;&amp; m</td>\n<td align=\"left\">将输入文件 m 和 n 合并。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt; tag</td>\n<td align=\"left\">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>\n</tr>\n</tbody></table></div></div>\n<blockquote>\n<p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<hr>\n<h2 id=\"输出重定向\">输出重定向<a href=\"2019/09/29/【转载】Shell教程#输出重定向\"></a></h2><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &gt; file1</span><br></pre></td></tr></table></div></figure>\n\n<p>上面这个命令执行command1然后将输出的内容存入file1。</p>\n<p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p>\n<h3 id=\"实例-18\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-18\"></a></h3><p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ who &gt; users</span><br></pre></td></tr></table></div></figure>\n\n<p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。</p>\n<p>你可以使用 cat 命令查看文件内容：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat users</span><br><span class=\"line\">_mbsetupuser console  Oct 31 17:35 </span><br><span class=\"line\">tianqixin    console  Oct 31 17:35 </span><br><span class=\"line\">tianqixin    ttys000  Dec  1 11:33</span><br></pre></td></tr></table></div></figure>\n\n<p>输出重定向会覆盖文件内容，请看下面的例子：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;菜鸟教程：www.runoob.com&quot; &gt; users</span><br><span class=\"line\">$ cat users</span><br><span class=\"line\">菜鸟教程：www.runoob.com</span><br><span class=\"line\">$</span><br></pre></td></tr></table></div></figure>\n\n<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;菜鸟教程：www.runoob.com&quot; &gt;&gt; users</span><br><span class=\"line\">$ cat users</span><br><span class=\"line\">菜鸟教程：www.runoob.com</span><br><span class=\"line\">菜鸟教程：www.runoob.com</span><br><span class=\"line\">$</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"输入重定向\">输入重定向<a href=\"2019/09/29/【转载】Shell教程#输入重定向\"></a></h2><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &lt; file1</span><br></pre></td></tr></table></div></figure>\n\n<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p>\n<p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p>\n<h3 id=\"实例-19\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-19\"></a></h3><p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wc -l users</span><br><span class=\"line\">       2 users</span><br></pre></td></tr></table></div></figure>\n\n<p>也可以将输入重定向到 users 文件：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  wc -l &lt; users</span><br><span class=\"line\">       2</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &lt; infile &gt; outfile</span><br></pre></td></tr></table></div></figure>\n\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<h3 id=\"重定向深入讲解\">重定向深入讲解<a href=\"2019/09/29/【转载】Shell教程#重定向深入讲解\"></a></h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>如果希望 stderr 重定向到 file，可以这样写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command 2 &gt; file</span><br></pre></td></tr></table></div></figure>\n\n<p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command 2 &gt;&gt; file</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>2</strong> 表示标准错误文件(stderr)。</p>\n<p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; file 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">$ command &gt;&gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></div></figure>\n\n<p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &lt; file1 &gt;file2</span><br></pre></td></tr></table></div></figure>\n\n<p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p>\n<hr>\n<h2 id=\"Here-Document\">Here Document<a href=\"2019/09/29/【转载】Shell教程#Here-Document\"></a></h2><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p>\n<p>它的基本的形式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command &lt;&lt; delimiter</span><br><span class=\"line\">    document</span><br><span class=\"line\">delimiter</span><br></pre></td></tr></table></div></figure>\n\n<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>\n<li>开始的delimiter前后的空格会被忽略掉。</li>\n</ul>\n</blockquote>\n<h3 id=\"实例-20\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-20\"></a></h3><p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wc -l &lt;&lt; EOF</span><br><span class=\"line\">    欢迎来到</span><br><span class=\"line\">    菜鸟教程</span><br><span class=\"line\">    www.runoob.com</span><br><span class=\"line\">EOF</span><br><span class=\"line\">3          # 输出结果为 3 行</span><br><span class=\"line\">$</span><br></pre></td></tr></table></div></figure>\n\n<p>我们也可以将 Here Document 用在脚本中，例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt; EOF</span><br><span class=\"line\">欢迎来到</span><br><span class=\"line\">菜鸟教程</span><br><span class=\"line\">www.runoob.com</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></div></figure>\n\n<p>执行以上脚本，输出结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">欢迎来到</span><br><span class=\"line\">菜鸟教程</span><br><span class=\"line\">www.runoob.com</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"dev-null-文件\">/dev/null 文件<a href=\"2019/09/29/【转载】Shell教程#dev-null-文件\"></a></h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null</span><br></pre></td></tr></table></div></figure>\n\n<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p>\n<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p><strong>注意：</strong>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<h1 id=\"Shell-文件包含\">Shell 文件包含<a href=\"2019/09/29/【转载】Shell教程#Shell-文件包含\"></a></h1><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p>\n<p>Shell 文件包含的语法格式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. filename   # 注意点号(.)和文件名中间有一空格</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">source filename</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"实例-21\">实例<a href=\"2019/09/29/【转载】Shell教程#实例-21\"></a></h3><p>创建两个 shell 脚本文件。</p>\n<p>test1.sh 代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">url=&quot;http://www.runoob.com&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>test2.sh 代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># author:菜鸟教程</span><br><span class=\"line\"># url:www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 . 号来引用test1.sh 文件</span><br><span class=\"line\">. ./test1.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用以下包含文件代码</span><br><span class=\"line\"># source ./test1.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;菜鸟教程官网地址：$url&quot;</span><br></pre></td></tr></table></div></figure>\n\n<p>接下来，我们为 test2.sh 添加可执行权限并执行：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x test2.sh </span><br><span class=\"line\">$ ./test2.sh </span><br><span class=\"line\">菜鸟教程官网地址：http://www.runoob.com</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p><strong>注：</strong>被包含的文件 test1.sh 不需要可执行权限。</p>\n</blockquote>\n","prev":{"title":"【转载】vue+animate使用过度动画","link":"2019/09/29/【转载】vue+animate使用过度动画"},"next":{"title":"Python利用ip代理和多线程批量爬取中国联通手机欠费金额","link":"2019/09/26/Python利用ip代理和多线程批量爬取中国联通手机欠费金额"},"plink":"http://yoursite.com/2019/09/29/【转载】Shell教程/","toc":[{"title":"Shell 变量","id":"Shell-变量","index":"1","children":[{"title":"Shell 字符串","id":"Shell-字符串","index":"1.1","children":[{"title":"单引号","id":"单引号","index":"1.1.1"},{"title":"双引号","id":"双引号","index":"1.1.2"},{"title":"拼接字符串","id":"拼接字符串","index":"1.1.3"},{"title":"获取字符串长度","id":"获取字符串长度","index":"1.1.4"},{"title":"提取子字符串","id":"提取子字符串","index":"1.1.5"},{"title":"查找子字符串","id":"查找子字符串","index":"1.1.6"}]},{"title":"Shell 数组","id":"Shell-数组","index":"1.2","children":[{"title":"定义数组","id":"定义数组","index":"1.2.1"},{"title":"读取数组","id":"读取数组","index":"1.2.2"},{"title":"获取数组的长度","id":"获取数组的长度","index":"1.2.3"}]},{"title":"Shell 注释","id":"Shell-注释","index":"1.3","children":[{"title":"多行注释","id":"多行注释","index":"1.3.1"}]}]},{"title":"Shell 传递参数","id":"Shell-传递参数","index":"2"},{"title":"Shell 数组","id":"Shell-数组-1","index":"3"},{"title":"Shell 基本运算符","id":"Shell-基本运算符","index":"4","children":[{"title":"实例","id":"实例-4","index":"4.1"},{"title":"算术运算符","id":"算术运算符","index":"4.2","children":[{"title":"实例","id":"实例-5","index":"4.2.1"}]},{"title":"实例","id":"实例-6","index":"4.3"},{"title":"关系运算符","id":"关系运算符","index":"4.4","children":[{"title":"实例","id":"实例-7","index":"4.4.1"}]},{"title":"实例","id":"实例-8","index":"4.5"},{"title":"布尔运算符","id":"布尔运算符","index":"4.6","children":[{"title":"实例","id":"实例-9","index":"4.6.1"}]},{"title":"实例","id":"实例-10","index":"4.7"},{"title":"逻辑运算符","id":"逻辑运算符","index":"4.8","children":[{"title":"实例","id":"实例-11","index":"4.8.1"}]},{"title":"实例","id":"实例-12","index":"4.9"},{"title":"字符串运算符","id":"字符串运算符","index":"4.10","children":[{"title":"实例","id":"实例-13","index":"4.10.1"}]},{"title":"实例","id":"实例-14","index":"4.11"},{"title":"文件测试运算符","id":"文件测试运算符","index":"4.12","children":[{"title":"实例","id":"实例-15","index":"4.12.1"}]},{"title":"实例","id":"实例-16","index":"4.13"},{"title":"Shell echo命令","id":"Shell-echo命令","index":"4.14","children":[{"title":"1.显示普通字符串:","id":"1-显示普通字符串","index":"4.14.1"},{"title":"2.显示转义字符","id":"2-显示转义字符","index":"4.14.2"},{"title":"3.显示变量","id":"3-显示变量","index":"4.14.3"},{"title":"4.显示换行","id":"4-显示换行","index":"4.14.4"},{"title":"5.显示不换行","id":"5-显示不换行","index":"4.14.5"},{"title":"6.显示结果定向至文件","id":"6-显示结果定向至文件","index":"4.14.6"},{"title":"7.原样输出字符串，不进行转义或取变量(用单引号)","id":"7-原样输出字符串，不进行转义或取变量-用单引号","index":"4.14.7"},{"title":"8.显示命令执行结果","id":"8-显示命令执行结果","index":"4.14.8"}]}]},{"title":"Shell printf 命令","id":"Shell-printf-命令","index":"5","children":[{"title":"printf的转义序列","id":"printf的转义序列","index":"5.1","children":[{"title":"实例","id":"实例-17","index":"5.1.1"}]}]},{"title":"Shell test 命令","id":"Shell-test-命令","index":"6","children":[{"title":"数值测试","id":"数值测试","index":"6.1"},{"title":"字符串测试","id":"字符串测试","index":"6.2"},{"title":"文件测试","id":"文件测试","index":"6.3"}]},{"title":"Shell 流程控制","id":"Shell-流程控制","index":"7","children":[{"title":"if else","id":"if-else","index":"7.1","children":[{"title":"if","id":"if","index":"7.1.1"},{"title":"if else","id":"if-else-1","index":"7.1.2"},{"title":"if else-if else","id":"if-else-if-else","index":"7.1.3"}]},{"title":"for 循环","id":"for-循环","index":"7.2"},{"title":"while 语句","id":"while-语句","index":"7.3","children":[{"title":"无限循环","id":"无限循环","index":"7.3.1"}]},{"title":"until 循环","id":"until-循环","index":"7.4"},{"title":"case","id":"case","index":"7.5"},{"title":"跳出循环","id":"跳出循环","index":"7.6","children":[{"title":"break命令","id":"break命令","index":"7.6.1"},{"title":"continue","id":"continue","index":"7.6.2"}]},{"title":"esac","id":"esac","index":"7.7"}]},{"title":"Shell 函数","id":"Shell-函数","index":"8","children":[{"title":"函数参数","id":"函数参数","index":"8.1"}]},{"title":"Shell 输入/输出重定向","id":"Shell-输入-输出重定向","index":"9","children":[{"title":"输出重定向","id":"输出重定向","index":"9.1","children":[{"title":"实例","id":"实例-18","index":"9.1.1"}]},{"title":"输入重定向","id":"输入重定向","index":"9.2","children":[{"title":"实例","id":"实例-19","index":"9.2.1"},{"title":"重定向深入讲解","id":"重定向深入讲解","index":"9.2.2"}]},{"title":"Here Document","id":"Here-Document","index":"9.3","children":[{"title":"实例","id":"实例-20","index":"9.3.1"}]},{"title":"/dev/null 文件","id":"dev-null-文件","index":"9.4"}]},{"title":"Shell 文件包含","id":"Shell-文件包含","index":"10"}]}