{"title":"Java学习笔记","date":"2019-09-20T19:05:21.000Z","link":"2019/09/21/Java学习笔记","tags":["Java","笔记"],"updated":"2019-11-06T04:14:46.000Z","content":"<h4 id=\"Lambda表达式\">Lambda表达式<a href=\"2019/09/21/Java学习笔记#Lambda表达式\"></a></h4><h6 id=\"lambda表达式语法格式\">lambda表达式语法格式<a href=\"2019/09/21/Java学习笔记#lambda表达式语法格式\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; expression 或 (parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"实例\">实例<a href=\"2019/09/21/Java学习笔记#实例\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 不需要参数,返回值为 5  </span></span><br><span class=\"line\">() -&gt; <span class=\"number\">5</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class=\"line\">x -&gt; <span class=\"number\">2</span> * x  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class=\"line\">(x, y) -&gt; x – y  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class=\"line\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) -&gt; x + y  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class=\"line\">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"输出Hello-world\">输出Hello world<a href=\"2019/09/21/Java学习笔记#输出Hello-world\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Greet greet=messag -&gt; System.out.println(<span class=\"string\">\"Hello \"</span>+messag);</span><br><span class=\"line\">    greet.sayMsg(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Greet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sayMsg</span><span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Caculate caculate = (<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y) -&gt; x-y;</span><br><span class=\"line\">    System.out.println(caculate.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Caculate</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<h5 id=\"Lambda表达式可以极大地简化匿名内部类的代码，举个例子，java8之前监听按钮时这样的\">Lambda表达式可以极大地简化匿名内部类的代码，举个例子，java8之前监听按钮时这样的<a href=\"2019/09/21/Java学习笔记#Lambda表达式可以极大地简化匿名内部类的代码，举个例子，java8之前监听按钮时这样的\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btn = <span class=\"keyword\">new</span> JButton();</span><br><span class=\"line\">btn.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"使用Lambda表达式之后\">使用Lambda表达式之后<a href=\"2019/09/21/Java学习笔记#使用Lambda表达式之后\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton btn = <span class=\"keyword\">new</span> JButton();</span><br><span class=\"line\">btn.addActionListener((e) -&gt; &#123;&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"便利集合也非常方便\">便利集合也非常方便<a href=\"2019/09/21/Java学习笔记#便利集合也非常方便\"></a></h5><h6 id=\"遍历一个list\">遍历一个list<a href=\"2019/09/21/Java学习笔记#遍历一个list\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// java8以前</span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"Alien\"</span>,<span class=\"string\">\"Bob\"</span>,<span class=\"string\">\"Candy\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String str : list)&#123;</span><br><span class=\"line\">System.out.println(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Lambda表达式</span></span><br><span class=\"line\">list.forEach(str -&gt; System.out.println(str));</span><br><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"遍历HashMap\">遍历HashMap<a href=\"2019/09/21/Java学习笔记#遍历HashMap\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap&lt;Integer, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"string\">\"One\"</span>);</span><br><span class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"string\">\"Two\"</span>);</span><br><span class=\"line\">map.put(<span class=\"number\">3</span>, <span class=\"string\">\"Three\"</span>);</span><br><span class=\"line\">map.put(<span class=\"number\">4</span>, <span class=\"string\">\"Four\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">map.forEach((k,v) -&gt; &#123;</span><br><span class=\"line\">    System.out.println(k+<span class=\"string\">\":\"</span>+v);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"使用Lambda的Map和Reduce\">使用Lambda的Map和Reduce<a href=\"2019/09/21/Java学习笔记#使用Lambda的Map和Reduce\"></a></h5><h6 id=\"Map\">Map<a href=\"2019/09/21/Java学习笔记#Map\"></a></h6><p>为1-8每个数都加上1，然后打印</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; num = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">num.stream().map((add) -&gt; add+<span class=\"number\">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></div></figure>\n\n<p>原理：首先将 (add) -&gt; add+1 表达式传到map方法，然后stream将其应用到流的每一个元素。然后foreach打印出来。</p>\n<h6 id=\"Reduce（折叠操作）\">Reduce（折叠操作）<a href=\"2019/09/21/Java学习笔记#Reduce（折叠操作）\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; num = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> all = num.stream().map((add) -&gt; add+<span class=\"number\">1</span>).reduce((sum,add)-&gt;sum+add).get();</span><br><span class=\"line\">System.out.println(all);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"过滤\">过滤<a href=\"2019/09/21/Java学习笔记#过滤\"></a></h5><p>输出大于5的数</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; integerList = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(integerList.stream().filter(x -&gt; (x &gt; <span class=\"number\">5</span>)).collect(Collectors.toList()));</span><br></pre></td></tr></table></div></figure>\n\n\n\n<h4 id=\"线程\">线程<a href=\"2019/09/21/Java学习笔记#线程\"></a></h4><h6 id=\"线程池\">线程池<a href=\"2019/09/21/Java学习笔记#线程池\"></a></h6><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newCachedThreadPool</span><br><span class=\"line\">——创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span><br><span class=\"line\"></span><br><span class=\"line\">newFixedThreadPool</span><br><span class=\"line\">——创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><br><span class=\"line\"></span><br><span class=\"line\">newScheduledThreadPool</span><br><span class=\"line\">——创建一个定长线程池，支持定时及周期性任务执行。</span><br><span class=\"line\"></span><br><span class=\"line\">newSingleThreadExecutor</span><br><span class=\"line\">创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</span><br><span class=\"line\"></span><br><span class=\"line\">如：创建一个最大任务为5的线程池</span><br><span class=\"line\">ExecutorService executorService = Executors.newFixedThreadPool(5);</span><br></pre></td></tr></table></div></figure>\n\n<pre><code>或者</code></pre><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//五个参数的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//六个参数的构造函数-1</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          ThreadFactory threadFactory)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//六个参数的构造函数-2</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          RejectedExecutionHandler handler)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//七个参数的构造函数</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><strong>int corePoolSize：</strong>该线程池中<strong>核心线程数最大值</strong> </li>\n</ul>\n<blockquote>\n<p><strong>核心线程：</strong>线程池新建线程的时候，如果当前线程总数小于corePoolSize，则新建的是核心线程，如果超过corePoolSize，则新建的是非核心线程核心线程默认情况下会一直存活在线程池中，即使这个核心线程啥也不干(闲置状态)。<br>如果指定ThreadPoolExecutor的allowCoreThreadTimeOut这个属性为true，那么核心线程如果不干活(闲置状态)的话，超过一定时间(时长下面参数决定)，就会被销毁掉。</p>\n</blockquote>\n<ul>\n<li><strong>int maximumPoolSize：</strong> 该线程池中<strong>线程总数最大值</strong> </li>\n</ul>\n<blockquote>\n<p>线程总数 = 核心线程数 + 非核心线程数。</p>\n</blockquote>\n<ul>\n<li><strong>long keepAliveTime：</strong>该线程池中<strong>非核心线程闲置超时时长</strong> </li>\n</ul>\n<blockquote>\n<p>一个非核心线程，如果不干活(闲置状态)的时长超过这个参数所设定的时长，就会被销毁掉，如果设置allowCoreThreadTimeOut = true，则会作用于核心线程。</p>\n</blockquote>\n<ul>\n<li><strong>TimeUnit unit：</strong>keepAliveTime的单位</li>\n</ul>\n<blockquote>\n<p>TimeUnit是一个枚举类型，其包括：<br>NANOSECONDS ： 1微毫秒 = 1微秒 / 1000<br>MICROSECONDS ： 1微秒 = 1毫秒 / 1000<br>MILLISECONDS ： 1毫秒 = 1秒 /1000<br>SECONDS ： 秒<br>MINUTES ： 分<br>HOURS ： 小时<br>DAYS ： 天</p>\n</blockquote>\n<ul>\n<li><strong>BlockingQueue workQueue：</strong>该线程池中的任务队列：维护着等待执行的Runnable对象</li>\n</ul>\n<blockquote>\n<p>当所有的核心线程都在干活时，新添加的任务会被添加到这个队列中等待处理，如果队列满了，则新建非核心线程执行任务。<br>常用的workQueue类型：</p>\n</blockquote>\n<ul>\n<li><strong>SynchronousQueue</strong>：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现&lt;线程数达到了maximumPoolSize而不能新建线程&gt;的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大</li>\n<li><strong>LinkedBlockingQueue</strong>：这个队列接收到任务的时候，如果当前线程数小于核心线程数，则新建线程(核心线程)处理任务；如果当前线程数等于核心线程数，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize</li>\n<li><strong>ArrayBlockingQueue</strong>：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误</li>\n<li><strong>DelayQueue</strong>：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务</li>\n<li><strong>ThreadFactory threadFactory：</strong>创建线程的方式，这是一个接口，你new他的时候需要实现他的Thread newThread(Runnable r)方法，一般用不上。</li>\n<li><strong>RejectedExecutionHandler handler：</strong>这玩意儿就是抛出异常专用的，比如上面提到的两个错误发生了，就会由这个handler抛出异常，根本用不上。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, </span><br><span class=\"line\">                       <span class=\"number\">1</span>,</span><br><span class=\"line\">                       <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>,</span><br><span class=\"line\">                       <span class=\"number\">1</span>,</span><br><span class=\"line\">                       <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                    threadFactory);</span><br><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, </span><br><span class=\"line\">                       Integer.MAX_VALUE,</span><br><span class=\"line\">                       <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\"><span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, </span><br><span class=\"line\">                       Integer.MAX_VALUE,</span><br><span class=\"line\">                       <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                       threadFactory);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">如:</span><br><span class=\"line\">ExecutorService pool=<span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">\t<span class=\"number\">5</span>, </span><br><span class=\"line\">\tInteger.MAX_VALUE,</span><br><span class=\"line\">    <span class=\"number\">0L</span>, </span><br><span class=\"line\">    TimeUnit.MILLISECONDS, </span><br><span class=\"line\">    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">poor.execute(<span class=\"keyword\">new</span> Runnable(***));</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NCPU = CPU的数量</span><br><span class=\"line\"></span><br><span class=\"line\">UCPU = 期望对CPU的使用率 <span class=\"number\">0</span> ≤ UCPU ≤ <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">W/C = 等待时间与计算时间的比率</span><br><span class=\"line\"></span><br><span class=\"line\">如果希望处理器达到理想的使用率，那么线程池的最优大小为：</span><br><span class=\"line\"></span><br><span class=\"line\">线程池大小=NCPU *UCPU(<span class=\"number\">1</span>+W/C)</span><br><span class=\"line\"></span><br><span class=\"line\">在Java中使用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ncpus = Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"CentOS安装使用，远程连接MySql","link":"2019/09/21/CentOS安装使用 基础操作 远程连接MySql"},"plink":"http://yoursite.com/2019/09/21/Java学习笔记/"}