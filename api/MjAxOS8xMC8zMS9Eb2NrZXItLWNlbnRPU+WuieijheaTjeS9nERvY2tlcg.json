{"title":"Docker--centOS安装操作Docker","date":"2019-10-31T12:15:52.688Z","link":"2019/10/31/Docker--centOS安装操作Docker","updated":"2019-08-06T04:48:40.985Z","content":"<h4 id=\"centOS安装操作Docker\">centOS安装操作Docker<a href=\"2019/10/31/Docker--centOS安装操作Docker#centOS安装操作Docker\"></a></h4><h6 id=\"1-安装与卸载docker\">1.安装与卸载docker<a href=\"2019/10/31/Docker--centOS安装操作Docker#1-安装与卸载docker\"></a></h6><p>​    安装docker</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）安装需要的软件包</span><br><span class=\"line\">\tyum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\">（2）设置yum源</span><br><span class=\"line\">\tyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">（3）安装</span><br><span class=\"line\">\tyum install -y docker-ce</span><br><span class=\"line\">(4) 配置阿里云加速器，在etc/docker/daemon.json文件中加入</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://wghlmi3i.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>​    卸载docker</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker docker-common docker-selinux docker-engine</span><br><span class=\"line\">查询安装的docker：yum list installed | grep docker</span><br><span class=\"line\">删除：yum remove ***</span><br></pre></td></tr></table></div></figure>\n\n\n\n<h6 id=\"3-使用docker，包含命令\">3.使用docker，包含命令<a href=\"2019/10/31/Docker--centOS安装操作Docker#3-使用docker，包含命令\"></a></h6><p>​    启动docker服务</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start或者</span><br><span class=\"line\">systemctl start docker.service</span><br></pre></td></tr></table></div></figure>\n\n<p>​    重启docker服务</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker restart</span><br></pre></td></tr></table></div></figure>\n\n<p>​    使用帮助</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --help</span><br></pre></td></tr></table></div></figure>\n\n\n\n<p>​    列出本机所有镜像（包含中间映像层）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -a</span><br></pre></td></tr></table></div></figure>\n\n<p>​    <img src=\"C:%5CUsers%5CNICE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557586854457.png\" alt=\"1557586854457\"></p>\n<p>​    </p>\n<p>​    列出镜像id</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -q</span><br></pre></td></tr></table></div></figure>\n\n<p>​    列出镜像（包含中间映像层）id</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -qa</span><br></pre></td></tr></table></div></figure>\n\n<p>​    查找可安装镜像，如docker search tomcat</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search ***</span><br></pre></td></tr></table></div></figure>\n\n<p>​    删除镜像，如hello-world</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi *******</span><br></pre></td></tr></table></div></figure>\n\n<p>​    强制删除镜像</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f ***********</span><br></pre></td></tr></table></div></figure>\n\n<p>​    通过交互模式启动并进入容器，退出ctrl+D</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t centos</span><br></pre></td></tr></table></div></figure>\n\n<p>​    后台启动容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -i centos</span><br></pre></td></tr></table></div></figure>\n\n<p>​    查看正在运行的容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></div></figure>\n\n<p>​    进入后台的容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec centos /bin/bash</span><br></pre></td></tr></table></div></figure>\n\n<p>​    关闭后台的容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop centos</span><br></pre></td></tr></table></div></figure>\n\n<p>​    run命令的参数解释</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]  </span><br><span class=\"line\"> </span><br><span class=\"line\">  -d, --detach=false         指定容器运行于前台还是后台，默认为false   </span><br><span class=\"line\">  -i, --interactive=false   打开STDIN，用于控制台交互  </span><br><span class=\"line\">  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false  </span><br><span class=\"line\">  -u, --user=&quot;&quot;              指定容器的用户  </span><br><span class=\"line\">  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）</span><br><span class=\"line\">  -w, --workdir=&quot;&quot;           指定容器的工作目录 </span><br><span class=\"line\">  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用  </span><br><span class=\"line\">  -e, --env=[]               指定环境变量，容器中可以使用该环境变量  </span><br><span class=\"line\">  -m, --memory=&quot;&quot;            指定容器的内存上限  </span><br><span class=\"line\">  -P, --publish-all=false    指定容器暴露的端口  </span><br><span class=\"line\">  -p, --publish=[]           指定容器暴露的端口 </span><br><span class=\"line\">  -h, --hostname=&quot;&quot;          指定容器的主机名  </span><br><span class=\"line\">  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class=\"line\">  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class=\"line\">  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">  --cidfile=&quot;&quot;               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class=\"line\">  --cpuset=&quot;&quot;                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class=\"line\">  --device=[]                添加主机设备给容器，相当于设备直通  </span><br><span class=\"line\">  --dns=[]                   指定容器的dns服务器  </span><br><span class=\"line\">  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class=\"line\">  --entrypoint=&quot;&quot;            覆盖image的入口点  </span><br><span class=\"line\">  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class=\"line\">  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class=\"line\">  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class=\"line\">  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class=\"line\">  --name=&quot;&quot;                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class=\"line\">  --net=&quot;bridge&quot;             容器网络设置:</span><br><span class=\"line\">\t\t\t\t                bridge 使用docker daemon指定的网桥     </span><br><span class=\"line\">\t\t\t\t                host \t//容器使用主机的网络  </span><br><span class=\"line\">\t\t\t\t                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class=\"line\">\t\t\t\t                none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class=\"line\">  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class=\"line\">  --restart=&quot;no&quot;             指定容器停止后的重启策略:</span><br><span class=\"line\">\t\t\t\t                no：容器退出时不重启  </span><br><span class=\"line\">\t\t\t\t                on-failure：容器故障退出（返回值非零）时重启 </span><br><span class=\"line\">\t\t\t\t                always：容器退出时总是重启  </span><br><span class=\"line\">  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class=\"line\">  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></div></figure>\n\n<p>​    docker常用十大命令</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、 从官网拉取镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">docker pull &lt;镜像名:tag&gt;</span><br><span class=\"line\">如：docker pull centos(拉取centos的镜像到本机)</span><br><span class=\"line\"> </span><br><span class=\"line\">2、搜索在线可用镜像名</span><br><span class=\"line\"> </span><br><span class=\"line\">docker search &lt;镜像名&gt;</span><br><span class=\"line\">如：docker search centos( 在线查找centos的镜像)</span><br><span class=\"line\"> </span><br><span class=\"line\">3、查询所有的镜像，默认是最近创建的排在最上</span><br><span class=\"line\"> </span><br><span class=\"line\">docker images</span><br><span class=\"line\"> </span><br><span class=\"line\">4、查看正在运行的容器</span><br><span class=\"line\"> </span><br><span class=\"line\">docker ps</span><br><span class=\"line\"> </span><br><span class=\"line\">5、删除单个镜像</span><br><span class=\"line\"> </span><br><span class=\"line\">docker rmi -f &lt;镜像ID&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">6、启动、停止操作</span><br><span class=\"line\"> </span><br><span class=\"line\">docker stop &lt;容器名or ID&gt; #停止某个容器 </span><br><span class=\"line\">docker start &lt;容器名or ID&gt; #启动某个容器 </span><br><span class=\"line\">docker kill &lt;容器名or ID&gt; #杀掉某个容器</span><br><span class=\"line\"> </span><br><span class=\"line\">7、查询某个容器的所有操作记录。</span><br><span class=\"line\"> </span><br><span class=\"line\">docker logs &#123;容器ID|容器名称&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">8、制作镜像  使用以下命令，根据某个“容器 ID”来创建一个新的“镜像”：</span><br><span class=\"line\"> </span><br><span class=\"line\">docker commit 93639a83a38e  wsl/javaweb:0.1</span><br><span class=\"line\"> </span><br><span class=\"line\">9、启动一个容器</span><br><span class=\"line\"> </span><br><span class=\"line\">docker run -d -p 58080:8080 --name javaweb wsl/javaweb:0.1 /root/run.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">解释：-d：表示以“守护模式”执行/root/run.sh脚本</span><br><span class=\"line\">      -p：表示宿主机与容器的端口映射，此时将容器内部的 8080 端口映射为宿主机的 58080 端口，这样就向外界暴露了 58080 端口，可通过 Docker 网桥来访问容器内部的 8080 端口了。</span><br><span class=\"line\">      -name:为容器命名</span><br><span class=\"line\"> </span><br><span class=\"line\">10、启动docker服务</span><br><span class=\"line\"> </span><br><span class=\"line\">service docker start</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"JDK--centOS安装jdk步骤：","link":"2019/10/31/JDK--centOS安装jdk步骤："},"next":{"title":"Hello World","link":"2019/10/31/hello-world"},"plink":"http://yoursite.com/2019/10/31/Docker--centOS安装操作Docker/"}